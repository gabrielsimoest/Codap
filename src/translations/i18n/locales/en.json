  {
    "translation": {
      "_comment info":"*********INFORMAÇÕES DO APP*********",
      "changes":"- Aplicativo criado",
      "dev":"Desenvolvedores:",
      "GTS":"Gabriel Terra Simões - Software Engineering Student, UNAERP",
      "GRP":"Gabriel Reverso Pereira - Computer Engineering Student, UNAERP",
      "dev_note":"Developers Note:",
      "dev_note2":"Codap was created by two computer engineering students from the University of Ribeirão Preto - UNAERP - being the winner of the 14th computer challenge at the university. Our intention with Codap is to expand the horizon of knowledge and, at the same time, bring part of what can be done with WEB development to people who are curious or want to start out as a WEB developer. We hope you have a good journey of getting to know each other with Cody, our faithful helper.",
      "special thanks":"Special thanks:",
      "names":"Thainá Cristina Covas - for creating the mascot",
      "declaration":"Declaration of use of images:",
      "pictures":"Some images used in the application are not our own and were obtained from the freepick website",

      "_common*********": "*********COMUNS*********",
      "close": "Close",
      "change": "Change",
      "Oops": "There are no classes for this module yet. We will bring new, better and more interactive classes soon!",

      "_comment*********": "*********CONFIGURAÇÃO*********",
      "settings": "Settings",
      "system": "System",
      "notification": "Notification",
      "info": "Informations",
      "language": "Language",
      "font": "Font",
      "theme": "Dark mode",
      "notifications": "Notifications",
      "informations": "Informations",
      "update": "Most recent update",
      "version": "App version",
      "about": "About",
      "select the language:": "Select the language:",
      "Change font size": "Change font size:",
      "increase": "Increase size",
      "decrease": "Decrease size",

      "_comment2*********": "*********PERFIL*********",
      "account": "Account",
      "name": "Name",
      "email": "Email",
      "edit account": "Edit account",
      "change password": "Change password",
      "change picture": "Change picture",
      "achievements": "Achievements",
      "exit": "Exit",
      "new name": "New name",
      "current password": "Current password",
      "new password": "new password",
      "confirm password": "confirm password",
      "successfully changed": "Successfully changed",

      "_comment3*********": "*********MARKET*********",
      "market": "Market",
      "buy using dependabots": "BUY USING DEPENDABOTS",
      "double experience": "Double Experience",
      "surprise chest": "Surprise Chest",
      "double time": "Double Time",
      "buy": "BUY",
      "buy double experience": "Do you really want to buy Double Experience for 5 Minutes?",
      "buy surprise chest": "Do you really want to buy the Surprise Chest?",
      "buy double time": "Do you really want to buy Double Time for your next class?",
      "you have double experience": "You've earned Double XP for 5 Minutes!",
      "you have double time": "You won Double Time for the Next Class!",
      "active" : "Active",
      "inactive" : "Inactive",

      "_comment4*********": "*********HOME*********",

      "_comment HTML*********": "*********HTML*********",
      "module1h":"Module 1",
      "concepts of html":"Concepts of HTML",
      "module2h":"Module 2",
      "intermediate html":"Intermediate HTML",
      "module3h":"Module 3",
      "advanced html":"Advanced HTML",
      "module4h":"Module 4",
      "mastery in html":"Mastery in HTML",

      "_comment CSS*********": "*********CSS*********",
      "module1c":"Module 1",
      "concepts of CSS":"Concepts of CSS",
      "module2c":"Module 2",
      "intermediate CSS":"Intermediate CSS",
      "module3c":"Module 3",
      "advanced CSS":"Advanced CSS",
      "module4c":"Module 4",
      "mastery in CSS":"Mastery in CSS",

      "_comment JAVASCRIPT*********": "*********JAVASCRIPT*********",
      "module1j":"Module 1",
      "concepts of JavaScript":"Concepts of JavaScript",
      "module2j":"Module 2",
      "intermediate JavaScript":"Intermediate JavaScript",
      "module3j":"Module 3",
      "advanced JavaScript":"Advanced JavaScript",
      "module4j":"Module 4",
      "mastery in JavaScript":"Mastery in JavaScript",

      "_comment5*********": "*********AULAS*********",

      "_comment class HTML*********": "*********HTML*********",
      "html" : {
        "basic" : {
          "conhecendo html" : {
            "Estrutura_mainText": "Hello, this is Cody. Shall we learn HTML? HTML is a markup language widely used in building web pages.",
            "Estrutura_secondText": "First, I will show a very basic structure so you can get an idea of what HTML looks like.",
            "Estrutura_endText": "As you can see, it's quite simple, but there are many other elements that can be added to this structure to create amazing websites.",
            "TagsElements_txt": "Now that we've seen the structure, let's better understand what's in it.",
            "TagsElements_adicionaltxt": "The structure is formed by opening and closing tags, which are indicated by these arrows <>. Inside them is the name of the element.",
            "TagsElements_adicionaltxt_end": "Remember, the structure MUST be between the <html> </html> tags. If not, your site will not work!",
            "HtmlStartEx1_adicionaltxt": "Most tags have an opening and a closing. The content is between them.",
            "HtmlStartEx1_pergunta": "<html> represents an opening tag, what would a closing tag look like?",
            "HtmlStartEx2_adicionaltxt": "What is the name of the element in the following code?",
            "HtmlStartEx2_pergunta": "<h1>CODAP</h1>",
            "HtmlStartEx3_pergunta": "What indicates a tag?",
            "HtmlStartEx4_pergunta": "Which of the options is correct?",
            "HtmlStartEx5_pergunta": "What happens if you don't put the <html> tag at the beginning and end of the project?",
            "HtmlStartEx5_opt1": "The site does not work",
            "HtmlStartEx5_opt2": "The site works, but with some limitations",
            "HtmlStartEx5_opt3": "The site works normally",
            "HtmlStartEx5_opt4": "The site performance is improved"
          },
          "title" : {
            "H1h6_txt": "The main texts can be written using the <h1> tag, where the number next to 'h' indicates the text size",
            "H1h6_adicionaltxt_end": "The smaller the number, the larger the text font. Indicating its level of importance.",
            "HeaderEx1_adicionaltxt": "Normally the <h1> is used for creating titles on your page",
            "HeaderEx1_pergunta": "code a title written Codap is awesome",
            "HeaderEx1_opt1": "<h1>",
            "HeaderEx1_opt2": "TEXT",
            "HeaderEx1_opt3": "CODAP is awesome",
            "HeaderEx1_opt4": "</h1>",
            "HeaderEx1_opt5": "<p>",
            "HeaderEx1_opt6": "</p>",
            "HeaderEx1_txtCerto": "<h1>CODAP is awesome</h1>",
            "HeaderEx2_pergunta": "how is the title of a page made",
            "HeaderEx2_opt1": "<h1> This is a title </h1>",
            "HeaderEx2_opt2": "<Title> This is a title </Title>",
            "HeaderEx2_opt3": "<h6> This is a title </h6>",
            "HeaderEx2_opt4": "<header> This is a title </header>",
            "HeaderEx3_adicionaltxt": "The <h2> can be used to write subtitles",
            "HeaderEx3_pergunta": "Write a subtitle that appears CODAP",
            "HeaderEx3_opt1": "<h4>",
            "HeaderEx3_opt2": "<h2>",
            "HeaderEx3_opt3": "CODAP",
            "HeaderEx3_opt4": "</h1>",
            "HeaderEx3_opt5": "</h2>",
            "HeaderEx3_opt6": "TITLE",
            "HeaderEx3_opt7": "</h4>",
            "HeaderEx3_txtCerto": "<h2>CODAP</h2>",
            "HeaderEx4_pergunta": "Which of the options is not correct?",
            "HeaderEx4_opt1": "<h1>text</h1>",
            "HeaderEx4_opt2": "<h2>text<h2>",
            "HeaderEx4_opt3": "<h6>text</h6>",
            "HeaderEx4_opt4": "<h2>text</h2>",
            "HeaderEx5_pergunta": "Which of the options represents a subtitle?",
            "HeaderEx5_opt1": "<h2>text</h2>",
            "HeaderEx5_opt2": "<title>text<title>",
            "HeaderEx5_opt3": "<h8>text</h8>",
            "HeaderEx5_opt4": "<text>text</text>",
            "HeaderEx6_pergunta": "Code a title written CODAP",
            "HeaderEx6_txtantes": "<h1>",
            "HeaderEx6_txtdepois": "</h1>",
            "HeaderEx6_txtCerto1": "CODAP",
            "HeaderEx6_txtCerto2": "codap",
            "HeaderEx6_txtCerto3": "Codap"
          },
          "phrase" : {
            "P_txt": "Although <h*> can write texts, the ideal for sentences is <p>.",
            "P_adicionaltxt": "Functionally using one or the other would change nothing, but it would hinder the reading of the code and search engines.",
            "FraseEx1_pergunta": "Which of the options below represents a sentence written CODAP?",
            "FraseEx1_opt1": "<phrase>CODAP</phrase>",
            "FraseEx1_opt2": "<h1>CODAP</h1>",
            "FraseEx1_opt3": "<t>CODAP</t>",
            "FraseEx1_opt4": "<p>CODAP</p>",
            "FraseEx2_pergunta": "What are the reasons for using <p> instead of <h*>?",
            "FraseEx2_opt1": "<p> is faster and more dynamic",
            "FraseEx2_opt2": "<p> is lighter and easier to use",
            "FraseEx2_opt3": "<p> facilitates the reading of the code and search engines",
            "FraseEx2_opt4": "<p> puts visual effects in the sentence",
            "FraseEx3_pergunta": "Write a sentence that appears Coding is cool",
            "FraseEx3_opt1": "Coding is cool",
            "FraseEx3_opt2": "<p>",
            "FraseEx3_opt3": "<h6>",
            "FraseEx3_opt4": "</p>",
            "FraseEx3_opt5": "</h6>",
            "FraseEx3_txtCerto": "<p>Coding is cool</p>",
            "FraseEx4_pergunta": "Code a sentence written HELLO WORLD",
            "FraseEx4_txtantes": "<p>",
            "FraseEx4_txtdepois": "</p>",
            "FraseEx4_txtCerto1": "HELLO WORLD",
            "FraseEx4_txtCerto2": "Hello world",
            "FraseEx4_txtCerto3": "hello world",
            "FraseEx5_pergunta": "Which of the options is correct?",
            "FraseEx5_opt1": "<phrase>text</phrase>",
            "FraseEx5_opt2": "<p><p>text",
            "FraseEx5_opt3": "<p>text</p>",
            "FraseEx5_opt4": "p=text",
            "FraseEx6_pergunta": "Code a sentence written CODAP",
            "FraseEx6_txtantes": "<p>",
            "FraseEx6_txtdepois": "</p>",
            "FraseEx6_txtCerto1": "CODAP",
            "FraseEx6_txtCerto2": "codap",
            "FraseEx6_txtCerto3": "Codap"
          },
          "buttons" : {
            "ButtonHtml_txt": "Buttons are interactive elements used for various functions.",
            "ButtonHtml_adicionaltxt": "To create your button, just write <button>text</button>",
            "ButtonEx1_pergunta": "Code a button written CODAP",
            "ButtonEx1_opt1": "CODAP",
            "ButtonEx1_opt2": "<h3>",
            "ButtonEx1_opt3": "<button>",
            "ButtonEx1_opt4": "</button>",
            "ButtonEx1_txtCerto": "<button>CODAP</button>",
            "ButtonEx2_adicionaltxt": "What will appear with the code below?",
            "ButtonEx2_pergunta": "<button>CODAP</button>",
            "ButtonEx2_opt1": "A title written CODAP",
            "ButtonEx2_opt2": "Nothing, because the tag is wrong",
            "ButtonEx2_opt3": "A button written CODAP",
            "ButtonEx2_opt4": "Will appear <button>CODAP</button>",
            "ButtonEx3_pergunta": "Code a button written CODAP",
            "ButtonEx3_txtantes": "<button>",
            "ButtonEx3_txtdepois": "</button>",
            "ButtonEx3_txtCerto1": "CODAP",
            "ButtonEx3_txtCerto2": "codap",
            "ButtonEx3_txtCerto3": "Codap",
            "ButtonEx4_pergunta": "Code a button written CODAP",
            "ButtonEx4_txtantes": "<",
            "ButtonEx4_txtdepois": ">",
            "ButtonEx4_txtCerto1": "button>CODAP</button",
            "ButtonEx4_txtCerto2": "button>codap</button",
            "ButtonEx4_txtCerto3": "button>Codap</button",
            "ButtonEx5_pergunta": "Which options are correct?",
            "ButtonEx5_opt1": "<button>text</button>",
            "ButtonEx5_opt2": "<button = text/>",
            "ButtonEx5_opt3": "<button>text<button>",
            "ButtonEx5_opt4": "button{text}",
            "ButtonEx6_pergunta": "Code a button written LOGIN",
            "ButtonEx6_opt1": "LOGIN",
            "ButtonEx6_opt2": "<",
            "ButtonEx6_opt3": "button",
            "ButtonEx6_opt4": "<",
            "ButtonEx6_opt5": "/button",
            "ButtonEx6_opt6": ">",
            "ButtonEx6_opt7": ">",
            "ButtonEx6_opt8": "EXIT",
            "ButtonEx6_txtCerto": "<button>LOGIN</button>"
          },
          "images" : {
            "ImgTeoric_mainText": "There are elements that can close in the same tag, but they need attributes along with the name to work correctly.",
            "ImgTeoric_secondText": "The <img/> element needs a 'src' attribute containing a link to display the image.",
            "ImgTeoric_thirdText": "<img src='link'/>",
            "ImgTeoric_endText": "You can use both double quotes and single quotes to put the image link. You can add an image from a file, but we will only focus on how to add via link.",
            "Img1_pergunta": "Create an image element with the following options:",
            "Img1_opt1": "<",
            "Img1_opt2": "img ",
            "Img1_opt3": "/>",
            "Img1_opt4": "src=",
            "Img1_opt5": "'https://LINK'",
            "Img1_txtCerto": "<img src='https://LINK'/>",
            "Img2_adicionaltxt": "You can add attributes to increase or decrease the height and width of the image proportionally.",
            "Img2_pergunta": "Create an image element that adjusts the height using the 'height' attribute:",
            "Img2_opt1": "<",
            "Img2_opt2": "img",
            "Img2_opt3": "/>",
            "Img2_opt4": " src=",
            "Img2_opt5": "'https://LINK'",
            "Img2_opt6": " height=",
            "Img2_opt7": "'30'",
            "Img2_txtCerto": "<img src='https://LINK' height='30'/>",
            "Img3_pergunta": "Now create an image element that adjusts the width using the 'width' attribute:",
            "Img3_opt1": "<",
            "Img3_opt2": "img",
            "Img3_opt3": "/>",
            "Img3_opt4": " src=",
            "Img3_opt5": "'https://LINK'",
            "Img3_opt6": " width=",
            "Img3_opt7": "'60'",
            "Img3_txtCerto": "<img src='https://LINK' width='60'/>",
            "Img4_adicionaltxt": "You can adjust both sides manually, but lose the proportion of the image.",
            "Img4_pergunta": "Adjust to 50 pixels high and 30 pixels wide.",
            "Img4_opt1": "<",
            "Img4_opt2": "img",
            "Img4_opt3": "/>",
            "Img4_opt4": " src=",
            "Img4_opt5": "'https://LINK'",
            "Img4_opt6": " width='30'",
            "Img4_opt7": " height='50'",
            "Img4_txtCerto": "<img src=1https://LINK1 height=1501 width=1301/>",
            "Img5_adicionaltxt": "What will appear with the following code?",
            "Img5_pergunta": "<img src='https://LINK' width='30'1/>",
            "Img5_opt1": "https://LINK",
            "Img5_opt2": "Image 30 pixels wide",
            "Img5_opt3": "<img src='https://LINK' width='30'/>",
            "Img5_opt4": "Image 30 pixels high",
            "Img6_pergunta": "Which of these options shows the correct use of the <img/> element?",
            "Img6_opt1": "<img src='https://LINK' />",
            "Img6_opt2": "<img/>>> src='https://LINK'",
            "Img6_opt3": "<img>src='https://LINK/'</img>",
            "Img6_opt4": "<img src='https://LINK' />'"
          }, 
          "comments" : {
            "Comentario_mainText": "Let's put a comment in your HTML document?",
            "Comentario_secondText": "Comments are used to facilitate the visualization of what the elements are doing in your project, making it easier to maintain and understand it.",
            "Comentario_endText": "Notice that they are not visible on your site.",
            "ComentarioEx1_pergunta": "Make a comment:",
            "ComentarioEx1_opt1": "<",
            "ComentarioEx1_opt2": ">",
            "ComentarioEx1_opt3": "!",
            "ComentarioEx1_opt4": "--",
            "ComentarioEx1_opt5": "CODAP",
            "ComentarioEx1_opt6": "--",
            "ComentarioEx1_txtCerto": "<!--CODAP-->",
            "ComentarioEx2_adicionaltxt": "You can even put elements in the comment, but of course they will not be shown.",
            "ComentarioEx2_pergunta": "Turn <p>CODAP</p> into a comment:",
            "ComentarioEx2_txtantes": "<!--",
            "ComentarioEx2_txtdepois": "-->",
            "ComentarioEx2_txtCerto1": "<p>CODAP</p>",
            "ComentarioEx2_txtCerto2": "<p>Codap</p>",
            "ComentarioEx2_txtCerto3": "<p>codap</p>",
            "ComentarioEx3_pergunta": "Write HELLO WORLD in the comment:",
            "ComentarioEx3_txtantes": "<!-- ",
            "ComentarioEx3_txtdepois": "-->",
            "ComentarioEx3_txtCerto1": "HELLO WORLD",
            "ComentarioEx3_txtCerto2": "Hello world",
            "ComentarioEx3_txtCerto3": "hello world",
            "ComentarioEx4_pergunta": "How do you create a comment?",
            "ComentarioEx4_opt1": "/comment: 'CODAP'",
            "ComentarioEx4_opt2": "//CODAP",
            "ComentarioEx4_opt3": "<!--CODAP-->",
            "ComentarioEx4_opt4": "<<<CODAP>>>",
            "ComentarioEx5_pergunta": "What can be inside the comment?",
            "ComentarioEx5_opt1": "Anything",
            "ComentarioEx5_opt2": "Only text elements",
            "ComentarioEx5_opt3": "Only pure texts",
            "ComentarioEx5_opt4": "Any <h*> element",
            "ComentarioEx6_pergunta": "Using what you learned, write a CODAP written comment:",
            "ComentarioEx6_txtantes": "< ",
            "ComentarioEx6_txtdepois": ">",
            "ComentarioEx6_txtCerto1": "!--CODAP--",
            "ComentarioEx6_txtCerto2": "!--Codap--",
            "ComentarioEx6_txtCerto3": "!--codap--"
          }
        },
        "inter": {
          "links": {
            "dynamicSiteQuestion": "Let's create a dynamic website using links?",
            "dynamicSiteExplanation": "To do this, you will need to define a reference attribute for the link and an id for the element you want to navigate to.",
            "dynamicSiteTagUsage": "You can create links using the <a> tag both to redirect to elements using the element's ID or to other websites using the URL.",
            "dynamicSiteExample": "As you saw in this example, when you click on the link, you are redirected to the element with that link ID.",
            "createLinkHeader": "Let's create a link!",
            "createLinkQuestion": "Firstly, add the href=\"#codap\" attribute as the link reference, don't forget the quotes!",
            "transformElementHeader": "Now let's turn another element into a link (we will use <h3> as an example). Follow the example below to create a link with the name CODAP and href=\"#codap\".",
            "transformElementQuestion": "<h3><a href=\"#REF\">LINK NAME</a></h3>",
            "unorderedListHeader": "Now that you have learned how to create a link, let's create an unordered list of links using <li> instead of <h3>.",
            "unorderedListQuestion": "The list should have 1 item with the name CODAP and href=\"#codap\"",
            "createIdHeader": "Now create an <h1> element with the attribute id=\"codap\" to assign to the link created previously (the id must be identical to the href).",
            "linkToOtherSitesHeader": "As mentioned earlier, you can create links to other websites.",
            "linkToGoogleQuestion": "How could a link to Google be?",
            "linkToIdQuestion": "Which of the options is creating a link to the ID codap?"
          },
          "lists" : {
            "createListsIntroduction": "You can create lists on your website. To do this, we use the <ul> or <ol> tags along with the <li>.",
            "unorderedListExplanation": "<ul> is used for unordered lists.",
            "orderedListExplanation": "<ol> is used for ordered lists.",
            "listRememberTip": "To remember more easily, ul means 'unordered list' and ol 'ordered list'.",
            "createListItemQuestion": "Use the <li> to create an item named CODAP",
            "createOrderedListInstruction": "Let's create an ordered list? To do this, you should use the <li> within an <ol>.",
            "createOrderedListQuestion": "Create a list of 3 items in this order: Gold, Silver, Bronze",
            "createUnorderedListInstruction": "What about creating an unordered now? Use what you learned inside the <ul>.",
            "createUnorderedListQuestion": "Create a list of 2 items in this order: Hello, World",
            "unorderedListElementQuestion": "Which element creates an unordered list?",
            "orderedListElementQuestion": "Which element creates an ordered list?",
            "codeListItemCODAPQuestion": "Code an item written CODAP"
          },
          "body": {
            "bodyContentDefinition": "The <body> is used to define the body of your project. It contains the content that will be shown to the user.",
            "bodyElementsExplanation": "Inside it, you can have elements like <header>, <main>, and <footer>",
            "singleBodyTagReminder": "There can only be one single <body> in the project.",
            "headerSectionExplanation": "The <header> is used to determine the header section of the site. It can contain elements seen previously.",
            "createHeaderWithCODAP": "Create a <header> with a title and a subtitle written CODAP",
            "mainElementExplanation": "The <main> indicates the main part of the HTML document body",
            "createMainWithCODAP": "Create a <main> with a paragraph written CODAP",
            "footerElementExplanation": "The <footer> indicates the footer of your HTML document. It can contain information about the site's author and contact addresses.",
            "createFooterWithCODAP": "Create a <footer> with three paragraphs written CODAP",
            "whichElementsNotInBody": "Which of these elements cannot be in the <body>?",
            "footerPurposeQuestion": "What is the purpose of the <footer>?",
            "howManyBodyTagsQuestion": "How many <body> tags can exist in the HTML document?"
          },
          "div": {
            "divContentDefinition": "The <div> is used to define a generic section of content and can also apply CSS styles like any other tag.",
            "divUsageExplanation": "You can use it as subdivisions of your body and other tags, and it can even replace <header>, <main>, and <footer>, but this makes the code less readable.",
            "divGenericTagNote": "Although it works for anything, because it is very generic, you should opt for using more specific tags to facilitate code reading.",
            "divFutureReplacementNote": "In the future, you will see more tags that can replace the <div> and learn how to add styles to your site.",
            "placeTitleSubtitleInDiv": "Place a title and a subtitle written CODAP inside the <div>",
            "createOrderedListInDiv": "Create an ordered list, inside the <div>, with 3 elements written: Gold, Silver, Bronze",
            "lineBreakAestheticImprovement": "You can add horizontal lines and breaks automatically to your site to improve aesthetics.",
            "lineBreakUsage": "For this, you use <hr/> and <br/> respectively.",
            "lineBreakExampleNote": "Observe how Lorem Ipsum is broken into two lines using <br>.",
            "whatCreatesLine": "What do we use to create a line?",
            "whatCreatesSpace": "What do we use to create a space?",
            "addTitleSpaceLineInDiv": "Add a title written CODAP, a space, and a line inside the <div>"
          }, 
          "head" : {
            "headIntermediateLevel": "Congratulations on reaching the intermediate level! Now we will delve deeper into how to better organize the code.",
            "headElementExplanation": "The first thing we will see is the <head>, which is an element that determines a section of elements that define data that is not visible to the user.",
            "headElementUsage": "It is also used to load JS scripts and CSS styles as shown in the example below. But they will not be our focus right now.",
            "headElementNotShown": "As you can see, nothing in the <head> is shown on the site.",
            "titleElementExplanation": "The <title> defines a title for your project. It is not visible on the site, showing only in the tab or title bar of the browser.",
            "defineTitleCODAP": "Define a title written CODAP",
            "whyTitleNotVisible": "Why is the <title> not visible?",
            "metaElementExplanation": "The <meta> uses attributes to define data about the site, but for now, we will use it to define the character set used.",
            "constructMetaCharset": "Use the options below to construct a <meta> with a charset=\"UTF-8\" attribute",
            "whichElementInsideHead": "Which of the following elements can go inside the <head>?",
            "purposeOfTitle": "What is the purpose of the <title>?",
            "defineCODAPAsTitle": "Define CODAP as a title for your project"
          }
        }
      },

      "how is the title of a page made": "How is the title of a page made?",
      "title1": "<h1> This is a title </h1>",
      "title2": "<Title> This is a title </Title>",
      "title3": "<h6> This is a title </h6>",
      "title4": "<header> This is a title </header>",
      "paragraphs are often used to separate text": "Paragraphs are often used to separate text",
      "which of these texts is in a paragraph": "Which of these texts is in a paragraph?",
      "paragraph1": "<Paragraph> This is a paragraph </Paragraph>",
      "paragraph2": "<Title> This is a paragraph </>",
      "paragraph3": "<p> This is a paragraph </p>",
      "paragraph4": "<header> This is a paragraph </header>",
      "code a title written Codap is awesome": "Code a title written Codap is awesome",
      "text": "Text",
      "codap is awesome": "Codap is awesome",
      "answer": "<h1>Codap is awesome</h1>",
      "buttons are often used to perform actions within websites": "Buttons are often used to perform actions within websites",
      "code a button written CODAP": "Code a Button written CODAP",
      
      "_comment class JS*********": "*********JS*********",
      "js" : {
        "basic" : {
          "intro" : {
            "helloCodyLetsLearnJS": "Hello, this is Cody, shall we learn JavaScript? This is a programming language used along with HTML to create functionalities that HTML does not provide.",
            "jsForWebsites": "JavaScript has other uses, but we will be looking at it for website creation.",
            "usingScriptTag": "To use it, we must open a <script> tag in your HTML document to be coding.",
            "outsideScriptTag": "For more complex and larger JS codes, it is possible and recommended to use a separate file and load it using the <script> tag, but we will see more about this later.",
            "startWithHelloWorld": "Let's start by writing your first HELLO WORLD?",
            "completeAlertWithString": "Complete the following alert function with \"HELLO WORLD\", but don't forget the quotes to identify it as a string.",
            "semicolonUsageInJS": "In JavaScript, in most cases where there is a line break, the use of a semicolon is not necessary. The exceptions are: Before (, [, and `. In any case, it is a good practice to always put the semicolon.",
            "createTwoAlertsNoSemicolon": "Create 2 alerts: \"HELLO WORLD\" and \"CODAP\". Do not forget the semicolon.",
            "correctUseOfAlert": "Which of the options below represents the correct use of alert?",
            "whatToAddForJSFunction": "What should be placed for JavaScript to function?",
            "createAnAlert": "Create an alert",
            "modernJSCodeUsage": "To make the code work in a modern and safe way, we add \"use strict\" right after opening the <script> tag.",
            "useStrict": "\"use strict\"; is a directive in JavaScript that activates strict mode, a more rigorous way of executing code that helps to avoid common errors, enforces better practices, and improves performance by restricting certain actions that are considered unsafe or prone to errors.",
            "example": "You can see an example of how to activate strict mode throughout your script. It can also be used at the top of your JS file."
          },
          "interactions" : {
            "learningInteractions": "Now that we've seen a bit about JavaScript, we will learn some types of interactions to add to your website.",
            "interactionsPopupExplanation": "In this lesson, we will see the functions alert(), prompt(), and confirm(). They trigger pop-ups that allow user interaction.",
            "interactionExample": "Below you will see an example containing the 3 mentioned functions. When you press the button, an alert will appear, then a prompt for the user to enter their name, and finally a confirmation asking whether they wish to proceed or not.",
            "deviceDifference": "Depending on the device and browser used, the appearance of these pop-ups can vary, but in the future, you will see how to make customized interactive pop-ups.",
            "alert": "The alert() function is used to display a warning to the user where the user's interaction will not cause any effect.",
            "createAlertTrue": "You have seen this function before, so create one that displays the value true.",
            "promptVariableExplanation": "The prompt() can be assigned to a variable to receive a value entered by the user. It can be written as: prompt(title, default); where default represents the placeholder text in your prompt, use empty quotes (\" \") to omit the default text.",
            "createPromptCODAP": "Create a variable CODAP that receives the value from the prompt.",
            "confirmReturnExplanation": "The confirm() returns true or false depending on the option the user clicks, being them: OK and cancel. It can be written as: confirm(question)",
            "createConfirmBOOLEAN": "Create a variable BOOLEAN that receives the value of the confirm.",
            "activateNotification": "'Activate notifications?'",
            "answare" : "let BOOLEAN = confirm('Activate notifications?');",
            "defaultValueAssignedToAGE": "What value will be assigned to AGE if the user does not change the default text?",
            "valueAssignedToANSWER": "What value will be assigned to ANSWER if the user clicks OK?"
          },
          "types" : {
            "jsTypeConversionIntro": "In JavaScript, we can convert types into others, for this we use the functions String(), Boolean(), and Number()",
            "transformingToAString": "We can transform booleans and numbers into strings using the String function.",
            "convertCODAPToString": "Use the String function to convert let CODAP = 20 into a string",
            "transformingToANumber": "We can do the same by transforming booleans and strings into numbers, but if a string contains non-numeric characters, NaN will appear representing a conversion failure.",
            "convertCODAPToNumber": "A boolean true is converted as 1 and false as 0. Knowing this, convert let CODAP = false into a number using the Number function.",
            "nonNumericStringToNumber": "What appears if you try to convert a non-numeric string into a number?",
            "usingBooleanFunction": "For the Boolean function, any value will be considered true. Already 0, null, undefined, NaN, \" \" will be false.",
            "convertCODAPToBoolean": "Use the Boolean function to convert let CODAP = null into a boolean",
            "stringToBooleanConversion": "Knowing that in the case of a string, if there is at least one character the Boolean conversion is true, answer:"
          },
          "data" : {
            "dataTypesIntroduction": "In JavaScript there are 8 data types, 7 of them are considered primitive and only 1 is considered an object.",
            "dataTypes": "These 8 data types are: Number, String, Boolean, BigInt, Symbol, Undeflned, Null, Object. But for now, we will see the first 4.",
            "dataExample": "In the example below are the types that we will cover in this lesson, you can use the console.log() function along with the \"typeof\" operator to see the data type of a variable through the terminal.",
            "numbersVarietyExplanation": "Numbers range from negative numbers to even decimal numbers, and do not need to be enclosed in quotes.",
            "whichOptionIsNumber": "Which of the options below represents a number?",
            "stringsRepresentationExplanation": "Strings can be represented by 3 types of quotes, containing 0 or more characters.",
            "whichOptionIsNotString": "Which of the options below does not represent a string?",
            "bigIntExplanation": "Numbers above (2^53-1) and below -(2^53-1) need to be declared as BigInt. For this, we can add a 'n' character at the end of the number.",
            "whichOptionIsBigInt": "Which of the options below represents a BigInt?",
            "booleansExplanation": "Booleans represent only two values, true or false.",
            "whichOneIsBoolean": "Which of these represents a boolean?",
            "specialDataTypes": "The remaining 4 types are: Null, Symbol, Undefined, and Object.",
            "nullUndefExplanation": "Null and Undefined represent an 'absence' of value, but in different ways. Null is intentionally assigned to indicate that a variable does not have a specific valid value at the moment. Undefined appears when a variable is declared but no value has been associated with it.",
            "symbolObject": "Symbol and Object are more complex and will be addressed in the future, so don't worry about them for now.",
            "NaN": "You may encounter NaN, but it is not a data type, rather a special value of the Number type. It stands for 'Not a Number' and appears when you try to perform an invalid mathematical operation, for example, 0 divided by 0."
          },
          "variables" : {
            "variablesAndConstantsInJS": "We will see about variables and constants in JavaScript. They can store numbers, strings, and objects.",
            "twoTypesOfVariables": "There are 2 types of variables: let and var.",
            "oneTypeOfConstant": "And one constant: const.",
            "explanation": "The let and var variables can be changed and read throughout your code, but the const constant cannot be changed, which is why it is a constant.",
            "preferLetOverVar": "Var and let have almost the same function, but nowadays prefer to use let.",
            "createVariableCODAPWithValue": "Create a variable CODAP and assign 5 to it",
            "changeVariableValue": "You can change the value of the previously assigned variable, just write the name and assign a new value. Do this and change the value to 10.",
            "constIsFixedValue": "Const is a fixed value, trying to change its value will result in an error. Use it when you are sure that the value will not change throughout the code.",
            "createConstantCODAPWithHelloWorld": "Create a constant CODAP and assign \"HELLO WORLD\" to it.",
            "displayVariableValueInAlert": "You can display the value of a variable using its name inside the alert.",
            "createVariableCODAPWithHelloAndAlert": "Create a variable CODAP = \"HELLO\", then create an alert(CODAP) to display the message.",
            "whatWillAlertDisplay": "Given the following code, what will appear in the alert?"
          }
        }
      },

      "_comment class CSS*********": "*********CSS*********",
      "css" : {
        "basic" : {
          "intro" : {
            "learnCSS": "Hello, this is Cody, shall we learn CSS? CSS is a mechanism for adding styles to a web document to improve the appearance of your site.",
            "cssDirectOrStyleTags": "CSS code can be applied directly to html tags (inline), contained within <style> tags, or through a separate style file that can be loaded with a <link> tag, but we'll explore the latter option later on.",
            "inlineStyle": "This example contains both the use of the <style> tag as well as inline styling.",
            "cssExample": "The 'p' and 'body' within the <style> in the example are selectors, which means that all elements with the same name as the selector will receive that style. Meanwhile, '.container' is a class selector, used to style a specific tag with the given class.",
            "roleOfCSS": "What is the role of CSS?",
            "addStyles": "Add styles",
            "addNewMechanics": "Add new mechanics",
            "addNotifications": "Add notifications",
            "addTranslations": "Add translations",
            "h1SelectorIndication": "What does the h1 selector indicate?",
            "h1ElementDeleted": "Indicates that every h1 element will be deleted",
            "h1ElementReplacedByH2": "Indicates that every h1 element will be replaced by h2",
            "h1ElementObtainStyles": "Indicates that every h1 element will obtain styles",
            "h1ElementExecutedAsJS": "Indicates that every h1 element will be executed as js",
            "cssInsideTag": "As mentioned before, one way to add styles is by applying them directly to html tags, but for larger codebases, opt for using <style> tags or even a separate file to make it more readable.",
            "createBlueColorStyleForH1": "Create a blue color style for h1 with the options below following the example: \n\n<tag-name style='your-style'>"
          },
          "background" : {
            "backgroundColorCSS_description": "A completely white website is not always pleasant, we can assign a color to a section of your HTML document.",
            "backgroundColorCSS_usage": "For this, we will use the background-color. It works just like the color style seen in the previous lesson, but this one is only for backgrounds.",
            "backgroundColorTags": "You can use this style for various tags that define a section, such as: <body>, <div>, <header>, and others. Be creative!",
            "createBlueStyleForBody_question": "Create a blue color style for the <body>",
            "defineColorAndBackgroundForP_question": "Define color: black and a background-color: hsl(200, 50%, 50%) for the p selector"
          },
          "color" : {
            "colorPropertyUsage": "You can add colors to your text elements using the color property. This example will show the inline use of this style, ensuring that each tag has its own separate style. In other lessons, you will learn to use class to do the same with <style> tags.",
            "acceptedColorValues": "The accepted color values range from HEX, RGB, HSL, RGBA, HSLA to even predefined color names.",
            "rgbaHsla": "In case you didn't know, it's worth mentioning that the difference between RGB and RGBA is the addition of a fourth opacity value that ranges from 0 (transparent) to 1 (opaque), the same applies to HSL and HSLA.",
            "createRGBColorStyleForH1": "Create an inline rgb(255, 99, 71) color style for the <h1> tag.",
            "opacityWithRGBA": "You can tweak the opacity using RGBA, where the last value represents the opacity (0 to 1).",
            "createRGBAColorStyleForH1": "Create an rgba(20, 99, 71, 0.7) color style for the <h1>",
            "styleTag": "Now add color to all <p> tags in a document using <style> and the p selector. Remember that you don't need the quotes inside the <style> tag.",
            "addColorForSelectorP": "Add the color: #00ffff."
          },
          "font" : {
            "FontFamilyCSS_mainText": "It is also possible to adjust the font of your text to better match your site. This is done using font-family.",
            "FontFamilyCSS_additionalText": "There are various fonts that CSS allows you to add to your site, however, some fonts need to be installed by the user to work, so avoid using many different fonts on your site and opt for using font categories considered safe for use.",
            "FontFamilyCSS_thirdText": "A good practice is to add fallback fonts, in case the primary font is not available on the system, it will try to use the second provided font, or the third, the fourth, and so on. As in the example below, the first <p> has the Times New Roman font, but if it is not available, the system will use any serif font.",
            "FontFamilyCSS_endText": "All the fonts used in the example are safe to use and are standard on almost all systems. The safe font categories are: Serif, Sans-serif, Monospace, Fantasy, and Cursive.",
            "FontFamilyEx1_question": "Set the font-family to Arial in <h2>",
            "FontFamilyEx1_option1": "CODAP",
            "FontFamilyEx1_option5": "font-family: Arial;",
            "FontFamilyEx2_question": "Set color: black; and a font-family: consolas; for the h3 selector",
            "FontFamilyEx2_correctOption1": "color: black;",
            "FontFamilyEx2_correctOption2": "font-family: consolas",
            "FontFamilyEx3_question": "Define a consolas font with 2 more fallback fonts for <h1>."
          },
          "fontSize" : {
            "FontSizeCSS_mainText": "We can change the size of the text in an HTML document using font-size.",
            "FontSizeCSS_additionalText": "It has several different types of values. You can use: 'px' (pixels), 'pt' (points, which is equivalent to 1/72 of an inch), 'x%' (relative to the parent element), 'em' (times relative to the parent element), 'rem' (times relative to the root element), and 'vw', 'vh', 'vmin', 'vmax' (these four are relative to the width and height of the viewport).",
            "fontSizeCSS_usage": "As you have seen, there are various measures to use. px and pt are fixed and do not depend on other values, but on larger and smaller screens your site may have text sizes different from what is expected, so evaluate which is best to use in your project.",
            "FontSizeEx1_question": "Add a font size of 20 pixels to the <p>",
            "FontSizeEx1_correctAnswer": "<body style='font-size:20px'>CODAP</body>",
            "FontSizeEx2_question": "Define color: black; and a background-color: blue; and a font-size: 20px; for the p selector",
            "FontSizeEx2_correctOption1": "color: black;",
            "FontSizeEx2_correctOption2": "background-color: blue;",
            "FontSizeEx2_correctOption3": "font-size: 20px;"
          }
        }
      },

      "lets learn CSS":"Hello, this is NAME, let's learn CSS? CSS is a mechanism for adding styles to a web document.",
      "CSS code can be applied directly to html tags or contained within <style> tags":"CSS code can be applied directly to html tags or contained within <style> tags",
      "CSS example":"The 'p' inside the <style> in the example is a selector, this represents that all elements with the same name as the selector will receive that style.",
      "what is the role of CSS?":"What is the role of CSS?",
      "add styles":"Add styles",
      "add new mechanics":"Add new mechanics",
      "add notifications":"Add notifications",
      "add translations":"Add translations",
      "what does the h1 selector indicate?":"What does the h1 selector indicate?",
      "indicates that every h1 element will be deleted":"Indicates that every h1 element will be deleted",
      "indicates that every h1 element will be replaced by h2":"Indicates that every h1 element will be replaced by h2",
      "indicates that every h1 element will obtain styles":"Indicates that every h1 element will obtain styles",
      "indicates that every h1 element will be executede as js":"Indicates that every h1 element will be executede as js",
      "create blue color style for h1":"Create a blue color style for h1",

      "_comment6*********": "*********BOTÕES*********",

      "_comment button HTML*********": "*********HTML*********",
      "Discovering HTML and Tags":"Discovering HTML and Tags",
      "Estructuring titles":"Estructuring titles",
      "Creating phrases":"Creating phrases",
      "Creating buttons":"Creating buttons",
      "Adding image":"Adding image",
      "Adding comment":"Adding comment",
      "Data elements":"Making a head",
      "Making a body":"Making a body",
      "Making lists":"Making lists",
      "Making links":"Making links",
      "Generic sections, lines and space":"Div, lines and space",
      "Identifying elements":"Identifying elements",
      "Table introduction":"Table introduction",
      "Creating data":"Creating data",
      "Adding line":"Adding line",
      "Adding data":"Adding data",
      "Data types2":"Data types",
      "Selecting data":"Selecting data",
      "Showing videos":"Showing videos",

      "_comment button JS*********": "*********JS*********",
      "Discovering JavaScript":"Discovering JavaScript",
      "JavaScript variables":"JavaScript variables",
      "Data types":"Data typesAdding interactions",
      "Adding interactions":"Adding interactions",
      "Converting types":"Converting types",
      "Basic operators and maths":"Basic operators and maths",
      "Comparisons":"Comparisons",
      "Logic functions":"Logic functions",
      "Creating loops":"Creating loops",

      "_comment button CSS*********": "*********CSS*********",
      "Discovering CSS":"Discovering CSS",
      "Using colors":"Using colors",
      "Adding background color":"Adding background color",
      "Adjusting font size":"Adjusting font size",
      "Changing font family":"Changing font family",
      "Adding borders":"Adding borders",
      "Putting margin":"Putting margin",
      "Adding padding":"Adding padding",

      "_comment components": "*********COMPONENTS*********",
      "next": "Next",
      "verify": "Verify",
      "congrats": "Congrats, you're right!",
      "continue": "Continue",
      "oh no": "Oh no, you were wrong!",
      "try again": "Try again",
      "back": "Back to Home Screen",
      "congratulations": "Congratulations, you were made for this!",
      "keep it up":"Keep it up!",
      "you were amazing":"You were amazing!",
      "you'll do better next time!":"You'll do better next time!",

      "_comment7*********": "*********TUTORIAIS*********",

      "tutorial" : {
        "common": {
          "tutorial title end":"Enjoy the class!",
          "tutorial end":"If you need help, just click the question mark button at the top of the screen. Now close this tutorial and enjoy the class!",
          
          "tutorial title timer":"Be fast!",
          "tutorial timer":"Sometimes you will have a timer at the top of the screen on advanced topics. Be fast, I know you can do it!"    
        },
        "theory": {
          "tutorial title theory 1":"Theoretical class",
          "tutorial theory 1":"I'm here to help you, this is your theoretical class. In it you will have a brief explanation of what you will learn in this topic and an example code.",
          
          "tutorial title theory 2":"Code window",
          "tutorial theory 2":"Note that here you will have a window with an example code. If you can't see all the code, drag it to the side as shown above.",
          
          "tutorial title theory 3":"Swich between index/web",
          "tutorial theory 3":"In most topics you will see the 'index' and 'web' buttons above the code, press them to switch between the sample code and the website it generates.",
          
          "tutorial title theory 4":"Web window",
          "tutorial theory 4":"In the 'web' window, you can drag to all sides (vertical and horizontal), in addition to being able to double tap for a slight zoom in the window."    
        },
        "option_exercise": {
          "option title 1" : "Option exercise",
          "option 1": "In this exercise you will test what you have learned from theory, whether a concept or a review of a certain code.",
          
          "option title 2": "Choose and check",
          "option 2": "You should choose one of the options to answer the question and click the button to check if you got it right.",
          
          "option title 3": "Hits and misses",
          "option 3" : "If you got it right, you will be redirected to the next exercise. But if you got it wrong, don't worry, read the question again or go back to the theory and try again, don't give up! "
        },
        "select_exercise": {
          "select title 1" : "Construction exercise",
          "select 1" : "In this exercise you should click on the blocks to build a code from the options provided.",
          
          "select title 2" : "Building",
          "select 2": "Click on the blocks to build the code and check if you got it right. Remember, not all options need to be used!",
          
          "select title 3" : "Deleting",
          "select 3": "If you have placed an incorrect option, use the arrow on the side to delete the content and redo it."
        },
        "text_exercise": {
          "text title 1" : "Text exercise",
          "text 1" : "This exercise is simple, in it you should write what is proposed by the exercise. Without error, you can do it!",
          
          "text title 2" : "Tip!",
          "text 2": "A useful tip is to try to write exactly as it was asked. Spaces or uppercase/lowercase letters in the wrong places can confuse our friend when evaluating your performance. So be careful with accidental spaces."
        }
      },

      
      "login": {
        "alert": {
          "empty": {
            "title": "Fields not filled!",
            "message": "Please fill in all fields to proceed."
          },
          "invalid": {
            "title": "Invalid data!",
            "message": "Incorrect password or email, please check the data again."
          }
        },
        "password": "Password",
        "register": "Click here to register"
      },
    
      "register": {
        "alert": {
          "empty": {
            "title": "Warning!",
            "message": "Please enter the data."
          },
          "invalid": {
            "title": "Warning!",
            "message": "Enter a valid email."
          },
          "success": {
            "title": "Success!",
            "message": "Registration completed."
          },
          "not match": {
            "title": "Warning!",
            "message": "The confirmation password does not match the original password. Please check and try again."
          }
        },
        "name": "Name",
        "confirm password": "Confirm password",
        "password": "Password",
        "invalid password": "Incorrect password",
        "register": "Register",
        "login": "Click here to return to login"
      },

      "alert": {
        "market": {
          "title": "Warning!",
          "message": {
            "dependabots": "Insufficient DependaBots.",
            "doubleXP": "Double Experience Disabled."
          }
        },
        "notification" : {
          "title" : "Notification Permission Denied",
          "message" : "Please enable notifications to receive reminders. You can enable them in your device's settings."
        }
      },
      
      "comingSoon" : {
        "title": "COMING SOON!",
        "message": "This feature is currently under development. Keep an eye out for future CODAP updates!"
      },

      "notificationService" : {
        "title": "Reminder",
        "message": "Come take more classes with CODAP, we miss you!"
      }
    }
  }